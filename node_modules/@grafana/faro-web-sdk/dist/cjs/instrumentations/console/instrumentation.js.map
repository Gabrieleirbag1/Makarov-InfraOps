{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../../../src/instrumentations/console/instrumentation.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,gDAA6G;AAI7G;IAA4C,0CAAmB;IAM7D,gCAAoB,OAA2C;QAA3C,wBAAA,EAAA,YAA2C;QAA/D,YACE,iBAAO,SACR;QAFmB,aAAO,GAAP,OAAO,CAAoC;QALtD,UAAI,GAAG,+CAA+C,CAAC;QACvD,aAAO,GAAG,mBAAO,CAAC;;IAM3B,CAAC;IAED,2CAAU,GAAV;QAAA,iBAuBC;QAtBC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAE9C,wBAAY;aACT,MAAM,CAAC,UAAC,KAAK,YAAK,OAAA,CAAC,CAAC,MAAA,KAAI,CAAC,OAAO,CAAC,cAAc,mCAAI,sBAAsB,CAAC,qBAAqB,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA,EAAA,CAAC;aACjH,OAAO,CAAC,UAAC,KAAK;YACb,yCAAyC;YACzC,OAAO,CAAC,KAAK,CAAC,GAAG;;gBAAC,cAAO;qBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;oBAAP,yBAAO;;gBACvB,IAAI;oBACF,IAAI,KAAK,KAAK,oBAAQ,CAAC,KAAK,EAAE;wBAC5B,KAAI,CAAC,GAAG,CAAC,SAAS,CAChB,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,CAAC,IAAA,oBAAQ,EAAC,GAAG,CAAC,IAAI,IAAA,mBAAO,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAA3D,CAA2D,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CACpG,CAAC;qBACH;yBAAM;wBACL,KAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;qBACnC;iBACF;gBAAC,OAAO,GAAG,EAAE;oBACZ,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;iBACpB;wBAAS;oBACR,CAAA,KAAA,KAAI,CAAC,gBAAgB,CAAA,CAAC,KAAK,CAAC,WAAI,IAAI,EAAE;iBACvC;YACH,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACP,CAAC;IA7BM,4CAAqB,GAAe,CAAC,oBAAQ,CAAC,KAAK,EAAE,oBAAQ,CAAC,KAAK,EAAE,oBAAQ,CAAC,GAAG,CAAC,CAAC;IA8B5F,6BAAC;CAAA,AAlCD,CAA4C,+BAAmB,GAkC9D;AAlCY,wDAAsB","sourcesContent":["import { allLogLevels, BaseInstrumentation, isArray, isObject, LogLevel, VERSION } from '@grafana/faro-core';\n\nimport type { ConsoleInstrumentationOptions } from './types';\n\nexport class ConsoleInstrumentation extends BaseInstrumentation {\n  readonly name = '@grafana/faro-web-sdk:instrumentation-console';\n  readonly version = VERSION;\n\n  static defaultDisabledLevels: LogLevel[] = [LogLevel.DEBUG, LogLevel.TRACE, LogLevel.LOG];\n\n  constructor(private options: ConsoleInstrumentationOptions = {}) {\n    super();\n  }\n\n  initialize() {\n    this.logDebug('Initializing\\n', this.options);\n\n    allLogLevels\n      .filter((level) => !(this.options.disabledLevels ?? ConsoleInstrumentation.defaultDisabledLevels).includes(level))\n      .forEach((level) => {\n        /* eslint-disable-next-line no-console */\n        console[level] = (...args) => {\n          try {\n            if (level === LogLevel.ERROR) {\n              this.api.pushError(\n                new Error(args.map((arg) => (isObject(arg) || isArray(arg) ? JSON.stringify(arg) : arg)).join(' '))\n              );\n            } else {\n              this.api.pushLog(args, { level });\n            }\n          } catch (err) {\n            this.logError(err);\n          } finally {\n            this.unpatchedConsole[level](...args);\n          }\n        };\n      });\n  }\n}\n"]}