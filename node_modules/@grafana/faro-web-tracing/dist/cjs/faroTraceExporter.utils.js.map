{"version":3,"file":"faroTraceExporter.utils.js","sourceRoot":"","sources":["../../src/faroTraceExporter.utils.ts"],"names":[],"mappings":";;;AACA,oEAA4E;AAE5E,gDAAyD;AAGzD,SAAgB,cAAc,CAAC,aAAoC;;IAApC,8BAAA,EAAA,kBAAoC;IACjE,KAA2B,UAAa,EAAb,+BAAa,EAAb,2BAAa,EAAb,IAAa,EAAE;QAArC,IAAM,YAAY,sBAAA;QACb,IAAA,UAAU,GAAK,YAAY,WAAjB,CAAkB;QAEpC,KAAwB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,EAAE;YAA/B,IAAM,SAAS,mBAAA;YACV,IAAA,KAAK,GAAiB,SAAS,MAA1B,EAAE,KAAe,SAAS,MAAd,EAAV,KAAK,mBAAG,EAAE,KAAA,CAAe;YAExC,KAAmB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,EAAE;gBAArB,IAAM,IAAI,cAAA;gBACb,IAAI,IAAI,CAAC,IAAI,KAAK,4BAAS,CAAC,gBAAgB,EAAE;oBAC5C,SAAS;iBACV;gBAED,IAAM,WAAW,GAA4C;oBAC3D,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;oBAChC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;iBAC/B,CAAC;gBAEF,IAAM,mBAAmB,GAAwB,EAAE,CAAC;gBAEpD,KAAwB,UAAe,EAAf,KAAA,IAAI,CAAC,UAAU,EAAf,cAAe,EAAf,IAAe,EAAE;oBAApC,IAAM,SAAS,SAAA;oBAClB,mBAAmB,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBAChF;gBAED,IAAM,KAAK,GAAG,CAAC,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,mCAAI,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAC/C,IAAI,SAAS,GAAG,yBAAa,CAAC;gBAE9B,IAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,EAAE;oBACf,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;wBAChB,SAAS,GAAG,MAAA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,mCAAI,KAAK,CAAC,IAAI,CAAC;qBACpD;oBAED,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;wBACd,SAAS,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;qBAC9C;iBACF;gBAED,gBAAI,CAAC,GAAG,CAAC,SAAS,CAAC,uBAAgB,SAAS,CAAE,EAAE,mBAAmB,EAAE,SAAS,EAAE,EAAE,WAAW,aAAA,EAAE,CAAC,CAAC;aAClG;SACF;KACF;AACH,CAAC;AAxCD,wCAwCC","sourcesContent":["import type { SpanContext } from '@opentelemetry/api';\nimport { ESpanKind, IResourceSpans } from '@opentelemetry/otlp-transformer';\n\nimport { faro, unknownString } from '@grafana/faro-core';\nimport type { EventAttributes as FaroEventAttributes } from '@grafana/faro-web-sdk';\n\nexport function sendFaroEvents(resourceSpans: IResourceSpans[] = []) {\n  for (const resourceSpan of resourceSpans) {\n    const { scopeSpans } = resourceSpan;\n\n    for (const scopeSpan of scopeSpans) {\n      const { scope, spans = [] } = scopeSpan;\n\n      for (const span of spans) {\n        if (span.kind !== ESpanKind.SPAN_KIND_CLIENT) {\n          continue;\n        }\n\n        const spanContext: Pick<SpanContext, 'traceId' | 'spanId'> = {\n          traceId: span.traceId.toString(),\n          spanId: span.spanId.toString(),\n        };\n\n        const faroEventAttributes: FaroEventAttributes = {};\n\n        for (const attribute of span.attributes) {\n          faroEventAttributes[attribute.key] = String(Object.values(attribute.value)[0]);\n        }\n\n        const index = (scope?.name ?? '').indexOf('-');\n        let eventName = unknownString;\n\n        if (scope?.name) {\n          if (index === -1) {\n            eventName = scope.name.split('/')[1] ?? scope.name;\n          }\n\n          if (index > -1) {\n            eventName = scope?.name.substring(index + 1);\n          }\n        }\n\n        faro.api.pushEvent(`faro.tracing.${eventName}`, faroEventAttributes, undefined, { spanContext });\n      }\n    }\n  }\n}\n"]}