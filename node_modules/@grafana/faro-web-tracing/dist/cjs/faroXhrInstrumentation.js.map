{"version":3,"file":"faroXhrInstrumentation.js","sourceRoot":"","sources":["../../src/faroXhrInstrumentation.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AACA,oGAAgG;AAQhG;IAA4C,0CAA6B;IAGvE,gCAAY,MAAgD;QAAhD,uBAAA,EAAA,WAAgD;QAA5D,YACE,kBAAM,MAAM,CAAC,SAId;QAFC,IAAM,IAAI,GAAG,KAAqB,CAAC;QACnC,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACtD,CAAC;IAED,wEAAwE;IACrD,2CAAU,GAA7B;QAAA,iBAgBC;QAfC,OAAO,UAAC,QAAsB;YAC5B,IAAM,MAAM,GAAG,KAAI,CAAC;YACpB,OAAO,SAAS,SAAS;gBAAuB,cAAO;qBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;oBAAP,yBAAO;;gBACrD,IAAM,MAAM,GAAW,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,GAAG,GAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;gBAEhC,IAAI,eAAe,CAAC,GAAG,CAAC,EAAE;oBACxB,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC;iBAChB;gBAED,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;gBAE3C,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IACH,6BAAC;AAAD,CAAC,AA5BD,CAA4C,gEAA6B,GA4BxE;AA5BY,wDAAsB;AA8BnC,SAAS,eAAe,CAAC,IAAS;IAChC,OAAO,IAAI,YAAY,GAAG,CAAC;AAC7B,CAAC","sourcesContent":["import type { Span } from '@opentelemetry/api';\nimport { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';\nimport type { XMLHttpRequestInstrumentationConfig } from '@opentelemetry/instrumentation-xml-http-request';\nimport type { OpenFunction } from '@opentelemetry/instrumentation-xml-http-request/build/src/types';\n\ntype Parent = {\n  _createSpan: (xhr: XMLHttpRequest, url: string, method: string) => Span | undefined;\n};\n\nexport class FaroXhrInstrumentation extends XMLHttpRequestInstrumentation {\n  private parentCreateSpan: Parent['_createSpan'];\n\n  constructor(config: XMLHttpRequestInstrumentationConfig = {}) {\n    super(config);\n\n    const self = this as any as Parent;\n    this.parentCreateSpan = self._createSpan.bind(this);\n  }\n\n  // Patching the parent's private method to handle url type string or URL\n  protected override _patchOpen() {\n    return (original: OpenFunction): OpenFunction => {\n      const plugin = this;\n      return function patchOpen(this: XMLHttpRequest, ...args): void {\n        const method: string = args[0];\n        let url: string | URL = args[1];\n\n        if (isInstanceOfURL(url)) {\n          url = url.href;\n        }\n\n        plugin.parentCreateSpan(this, url, method);\n\n        return original.apply(this, args);\n      };\n    };\n  }\n}\n\nfunction isInstanceOfURL(item: any): item is URL {\n  return item instanceof URL;\n}\n"]}